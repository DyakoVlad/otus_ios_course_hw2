//
// CharactersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class CharactersAPI {
    /**
     Rick And Morty characters
     
     - parameter name: (query) The name of the character 
     - parameter status: (query) date (optional)
     - parameter page: (query) number of page (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAllCharacters(name: String, status: String? = nil, page: Int? = nil, completion: @escaping ((_ data: CharacterList?,_ error: Error?) -> Void)) {
        getAllCharactersWithRequestBuilder(name: name, status: status, page: page).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Rick And Morty characters
     - GET /character/
     - parameter name: (query) The name of the character 
     - parameter status: (query) date (optional)
     - parameter page: (query) number of page (optional)
     - returns: RequestBuilder<CharacterList> 
     */
    open class func getAllCharactersWithRequestBuilder(name: String, status: String? = nil, page: Int? = nil) -> RequestBuilder<CharacterList> {
        let path = "/character/"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name.encodeToJSON(), 
            "status": status?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<CharacterList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Rick And Morty characters
     
     - parameter id: (path) The id of the character 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCharacterById(id: Int, completion: @escaping ((_ data: ModelCharacter?,_ error: Error?) -> Void)) {
        getCharacterByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Rick And Morty characters
     - GET /character/{id}
     - parameter id: (path) The id of the character 
     - returns: RequestBuilder<ModelCharacter> 
     */
    open class func getCharacterByIdWithRequestBuilder(id: Int) -> RequestBuilder<ModelCharacter> {
        var path = "/character/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ModelCharacter>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
